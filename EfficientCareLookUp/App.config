<?xml version="1.0" encoding="utf-8" ?>
<configuration>
    <configSections>
        <sectionGroup name="applicationSettings" type="System.Configuration.ApplicationSettingsGroup, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" >
            <section name="EfficientCareLookUp.Properties.Settings" type="System.Configuration.ClientSettingsSection, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" requirePermission="false" />
        </sectionGroup>
    </configSections>
    <startup> 
        <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.5.2" />
    </startup>
    <applicationSettings>
        <EfficientCareLookUp.Properties.Settings>
            <setting name="POSTGRES_HOST" serializeAs="String">
                <value>vsbslgprd01.zmr.zimmer.com</value>
            </setting>
            <setting name="POSTGRES_DATABASE" serializeAs="String">
                <value>postgres</value>
            </setting>
            <setting name="POSTGRES_PORT" serializeAs="String">
                <value>5432</value>
            </setting>
            <setting name="POSTGRES_USERNAME" serializeAs="String">
                <value>doarni</value>
            </setting>
            <setting name="POSTGRES_PASSWORD" serializeAs="String">
                <value>ZimmerBiomet</value>
            </setting>
            <setting name="ORACLE_HOST" serializeAs="String">
                <value>10.201.207.188</value>
            </setting>
            <setting name="ORACLE_SID" serializeAs="String">
                <value>smsprd</value>
            </setting>
            <setting name="ORACLE_PORT" serializeAs="String">
                <value>1521</value>
            </setting>
            <setting name="ORACLE_USERNAME" serializeAs="String">
                <value>logistics</value>
            </setting>
            <setting name="ORACLE_PASSWORD" serializeAs="String">
                <value>log78gist</value>
            </setting>
            <setting name="EFFICIENT_CARE_COMPONENT_LOOKUP" serializeAs="String">
                <value>WITH S0 AS (
    SELECT DISTINCT
      P.ID AS PRODUCT_ID,
      PC.COMPONENT_PRODUCT_ID,
      PC.QUANTITY
    FROM
      SMS_WRITE.PRODUCT P
      LEFT JOIN SMS_WRITE.PRODUCT_COMPONENT PC ON P.ID = PC.PRODUCT_ID
    WHERE
      P.PRODUCT_TYPE IN (1, 2)
),
    S1 AS (
      SELECT
        P.ID                     AS KIT_PRODUCT_ID,
        P.PRODUCT_NUMBER         AS KIT_PRODUCT_NUMBER,
        P.EDI_NUMBER             AS KIT_EDI,
        P.DESCRIPTION            AS KIT_DESCRIPTION,
        P2.PRODUCT_NUMBER        AS COMPONENT_PRODUCT_NUMBER,
        P2.ID                    AS COMPONENT_PROD_ID,
        P2.EDI_NUMBER            AS COMPONENT_EDI_NUMBER,
        P2.DESCRIPTION           AS COMPONENT_DESCRIPTION,
        S0.QUANTITY              AS COMPONENT_QUANTITY_IN_KIT,
        COUNT(P2.PRODUCT_NUMBER) AS TOTAL_COMPONENT_QTY_IN_KIT
      FROM
        S0
        LEFT JOIN SMS_WRITE.PRODUCT P ON S0.PRODUCT_ID = P.ID
        LEFT JOIN SMS_WRITE.PRODUCT P2 ON S0.COMPONENT_PRODUCT_ID = P2.ID
      GROUP BY
        P.ID, P.PRODUCT_NUMBER, P.EDI_NUMBER, P.DESCRIPTION,
        P2.ID, P2.EDI_NUMBER, P2.PRODUCT_NUMBER, P2.DESCRIPTION,
        S0.QUANTITY
  ),

    S5 AS (
      SELECT
        P2.PRODUCT_NUMBER                             AS KIT_PROD_NUMBER,
        PS.SERIAL_NUMBER                              AS SERIAL_NUMBER,
        B.ZONE || '-' || B.POSITION || '-' || B.SHELF AS KIT_BIN,
        P.EDI_NUMBER                                  AS COMPONENT_EDI,
        SUM(S.QUANTITY_AVAILABLE)                     AS QUANTITY_AVAILABLE,
        PL.LOT_NUMBER                                 AS COMPONENT_LOT_NUMBER
      FROM
        SMS_WRITE.STOCK S
        LEFT JOIN SMS_WRITE.PRODUCT P ON S.PRODUCT_ID = P.ID
        LEFT JOIN SMS_WRITE.STOCK S2 ON S.CONTAINER_ID = S2.ID AND S.CONTAINER_TYPE = 2
        LEFT JOIN SMS_WRITE.PRODUCT P2 ON S2.PRODUCT_ID = P2.ID
        LEFT JOIN SMS_WRITE.PRODUCT_SERIAL PS ON S2.SERIAL_ID = PS.ID
        LEFT JOIN SMS_WRITE.BIN B ON S2.CONTAINER_ID = B.ID AND S2.CONTAINER_TYPE = 1
        LEFT JOIN SMS_WRITE.PRODUCT_LOT PL ON S.LOT_ID = PL.ID
      WHERE
        S.LOCATION_TYPE = 1
        AND S.LOCATION_ID IN (370, 1871)
        AND S.STOCK_TYPE = 2
        AND S.CONTAINER_TYPE = 2
        AND P2.PRODUCT_NUMBER IS NOT NULL
      GROUP BY
        PL.LOT_NUMBER,
        P2.PRODUCT_NUMBER,
        PS.SERIAL_NUMBER,
        B.ZONE || '-' || B.POSITION || '-' || B.SHELF,
        P.EDI_NUMBER
  ),
    S7 AS (
      SELECT DISTINCT
        S.LOCATION_ID,
        P.PRODUCT_NUMBER                              AS KIT_PRODUCT_NUMBER,
        PS.ID                                         AS SERIAL_ID,
        PS.SERIAL_NUMBER,
        S.HOLD_REASON,
        S.HOLD_NOTE,
        B.ZONE || '-' || B.POSITION || '-' || B.SHELF AS KIT_BIN,
        S.ID                                          AS STOCK_ID,
        S.CONTAINER_ID                                AS BIN_ID
      FROM
        SMS_WRITE.STOCK S
        LEFT JOIN SMS_WRITE.PRODUCT P ON S.PRODUCT_ID = P.ID
        LEFT JOIN SMS_WRITE.PRODUCT_SERIAL PS ON PS.ID = S.SERIAL_ID
        LEFT JOIN SMS_WRITE.BIN B ON B.ID = S.CONTAINER_ID AND S.CONTAINER_TYPE = 1
      WHERE
        S.INVENTORY_TYPE = 3
        AND S.STOCK_TYPE IN (3, 4)
        AND S.LOCATION_TYPE = 1
        AND S.LOCATION_ID IN (370, 1871)
  ),
    S8 AS (
      SELECT
        P.PRODUCT_NUMBER,
        P.ID                                          AS COMPONENT_ID,
        SUM(S.QUANTITY_AVAILABLE)                     AS QUANTITY_AVAILABLE,
        B.ZONE || '-' || B.POSITION || '-' || B.SHELF AS COMPONENT_BIN,
        B.ID                                          AS COMPONENT_BIN_ID,
        CASE
        WHEN B.LOCATION_ID = 370
          THEN 'SOUTHAVEN'
        WHEN B.LOCATION_ID = 1871
          THEN 'WARSAW'
        END                                           AS WAREHOUSE_BIN
      FROM
        SMS_WRITE.STOCK S
        LEFT JOIN SMS_WRITE.PRODUCT P ON S.PRODUCT_ID = P.ID
        LEFT JOIN SMS_WRITE.BIN B ON S.CONTAINER_ID = B.ID AND S.CONTAINER_TYPE = 1
      WHERE
        S.LOCATION_ID IN (370, 1871)
        AND S.STOCK_TYPE IN (1, 2)
        AND S.QUANTITY_AVAILABLE &gt; 0
        AND B.LOCATION_ID IN (370, 1871)
      GROUP BY
        P.PRODUCT_NUMBER, P.ID, B.ZONE, B.POSITION, B.SHELF, B.LOCATION_ID, B.ID
  ),
    S9 AS (
      SELECT
        S7.LOCATION_ID,
        S1.KIT_PRODUCT_ID,
        S1.KIT_PRODUCT_NUMBER,
        S1.KIT_EDI,
        S1.KIT_DESCRIPTION,
        S7.SERIAL_NUMBER,
        S7.SERIAL_ID,
        S7.KIT_BIN,
        S7.STOCK_ID,
        S7.BIN_ID,
        S1.COMPONENT_PRODUCT_NUMBER,
        S1.COMPONENT_PROD_ID,
        S1.COMPONENT_EDI_NUMBER,
        S1.COMPONENT_DESCRIPTION,
        S1.COMPONENT_QUANTITY_IN_KIT,
        S1.TOTAL_COMPONENT_QTY_IN_KIT,
        S7.HOLD_REASON,
        S7.HOLD_NOTE
      FROM
        S1
        LEFT JOIN S7 ON S1.KIT_PRODUCT_NUMBER = S7.KIT_PRODUCT_NUMBER
  ),
    WRAPUP AS (
      SELECT
        S9.KIT_PRODUCT_ID                                                                       AS KIT_PRODUCT_ID,
        'Z-' || S9.KIT_PRODUCT_ID || '-' || S9.SERIAL_NUMBER                                    AS KIT_BARCODE,
        S9.KIT_PRODUCT_NUMBER                                                                   AS KIT_PRODUCT_NUMBER,
        S9.KIT_EDI                                                                              AS KIT_EDI_NUMBER,
        S9.KIT_DESCRIPTION                                                                      AS KIT_DESCRIPTION,
        S9.SERIAL_NUMBER                                                                        AS KIT_SERIAL_NUMBER,
        S9.SERIAL_ID                                                                            AS KIT_SERIAL_ID,
        S9.KIT_BIN,
        S9.BIN_ID                                                                               AS KIT_BIN_ID,
        CASE
        WHEN S9.LOCATION_ID = 370
          THEN 'SOUTHAVEN'
        WHEN S9.LOCATION_ID = 1871
          THEN 'WARSAW'
        END                                                                                     AS WAREHOUSE_LOCATION,
        S9.COMPONENT_PRODUCT_NUMBER                                                             AS COMPONENT_PRODUCT_NUMBER,
        S9.COMPONENT_PROD_ID                                                                    AS COMPONENT_PRODUCT_ID,
        S9.COMPONENT_DESCRIPTION                                                                AS COMPONENT_DESCRIPTION,
        COALESCE(S8.QUANTITY_AVAILABLE,
                 0)                                                                             AS COMPONENT_QTY_ON_SHELF,
        COALESCE(S8.COMPONENT_BIN, NULL)                                                        AS COMPONENT_BIN,
        COALESCE(S8.WAREHOUSE_BIN, 'NONE AVAILABLE')                                            AS WAREHOUSE_BIN,
        S8.COMPONENT_BIN_ID,
        S9.COMPONENT_QUANTITY_IN_KIT                                                            AS COMPONENT_QUANTITY_IN_KIT_STD,
        COUNT(*)
        OVER (
          PARTITION BY S9.TOTAL_COMPONENT_QTY_IN_KIT, S9.SERIAL_NUMBER, S9.KIT_PRODUCT_NUMBER ) AS TOTAL_COMPONENTS_IN_KIT_STD,
        COALESCE(S5.QUANTITY_AVAILABLE, 0)                                                      AS QTY_IN_KIT,
        SUM(S9.COMPONENT_QUANTITY_IN_KIT - COALESCE(S5.QUANTITY_AVAILABLE, 0))
        OVER (
          PARTITION BY S9.KIT_PRODUCT_NUMBER, S9.SERIAL_NUMBER )                                AS PIECES_MISSING,
        S9.HOLD_REASON,
        S9.HOLD_NOTE,
        S9.STOCK_ID                                                                             AS KIT_STOCK_ID,
        S9.BIN_ID                                                                               AS KIT_CONTAINER_ID
      FROM
        S9
        LEFT JOIN S5 ON S9.KIT_PRODUCT_NUMBER = S5.KIT_PROD_NUMBER AND S9.SERIAL_NUMBER = S5.SERIAL_NUMBER AND
                        S9.COMPONENT_EDI_NUMBER = S5.COMPONENT_EDI
        LEFT JOIN S8 ON S8.COMPONENT_ID = S9.COMPONENT_PROD_ID
      WHERE
        S9.KIT_PRODUCT_NUMBER LIKE '%{0}%'
      GROUP BY
        S9.BIN_ID,
        S8.COMPONENT_BIN_ID,
        S8.WAREHOUSE_BIN,
        S9.LOCATION_ID,
        S9.HOLD_REASON,
        S9.HOLD_NOTE,
        S9.KIT_PRODUCT_ID,
        S9.SERIAL_NUMBER,
        S9.SERIAL_ID,
        S9.KIT_PRODUCT_NUMBER,
        S9.KIT_DESCRIPTION,
        S9.KIT_EDI,
        S9.KIT_BIN,
        S9.COMPONENT_EDI_NUMBER,
        S8.QUANTITY_AVAILABLE,
        S8.COMPONENT_BIN,
        S9.COMPONENT_QUANTITY_IN_KIT,
        S9.TOTAL_COMPONENT_QTY_IN_KIT,
        S9.COMPONENT_DESCRIPTION,
        S9.COMPONENT_PROD_ID,
        S9.COMPONENT_PRODUCT_NUMBER,
        S5.QUANTITY_AVAILABLE,
        S9.STOCK_ID
      ORDER BY
        S9.SERIAL_NUMBER,
        S9.COMPONENT_PRODUCT_NUMBER
  ),
    sf AS (
      SELECT
        KIT_PRODUCT_ID,
        KIT_PRODUCT_NUMBER,
        KIT_DESCRIPTION,
        KIT_SERIAL_NUMBER,
        KIT_SERIAL_ID,
        KIT_BIN,
        KIT_BIN_ID,
        WAREHOUSE_LOCATION,
        KIT_STOCK_ID,
        KIT_CONTAINER_ID,
        COMPONENT_PRODUCT_ID,
        COMPONENT_PRODUCT_NUMBER,
        COMPONENT_DESCRIPTION,
        COMPONENT_QTY_ON_SHELF,
        COMPONENT_BIN,
        WAREHOUSE_BIN,
        COMPONENT_BIN_ID,
        COMPONENT_QUANTITY_IN_KIT_STD,
        TOTAL_COMPONENTS_IN_KIT_STD,
        TOTAL_COMPONENTS_IN_KIT_STD - PIECES_MISSING AS TOTAL_PIECES_IN_KIT,
        QTY_IN_KIT                                   AS COMPONENT_QTY_IN_KIT,
        PIECES_MISSING,
        CASE
        WHEN PIECES_MISSING = 0
          THEN 'VALID'
        WHEN PIECES_MISSING != 0
          THEN 'INVALID'
        WHEN KIT_SERIAL_NUMBER IS NULL
          THEN 'NOT_BUILT'
        END                                          AS KIT_HEALTH,
        HOLD_NOTE,
        HOLD_REASON,
        CASE
        WHEN HOLD_REASON = 1
          THEN 'CORPORATE_HOLD'
        WHEN HOLD_REASON = 2
          THEN 'AWAITING_QC_CHECK'
        WHEN HOLD_REASON = 3
          THEN 'INVENTORY_STAGING'
        WHEN HOLD_REASON = 4
          THEN 'MISSING_ITEMS'
        WHEN HOLD_REASON = 5
          THEN 'PICK_SHORTAGE'
        WHEN HOLD_REASON = 6
          THEN 'CYCLE_COUNT_IN_PROGRESS'
        WHEN HOLD_REASON = 7
          THEN 'NOT_FOUND_DURING_CYCLE_COUNT'
        END                                          AS HOLD_REASON_DESCRIPTION
      FROM
        WRAPUP
      GROUP BY
        KIT_BIN_ID,
        WAREHOUSE_BIN,
        KIT_CONTAINER_ID,
        KIT_STOCK_ID,
        HOLD_NOTE,
        HOLD_REASON,
        KIT_PRODUCT_ID,
        KIT_PRODUCT_NUMBER,
        KIT_DESCRIPTION,
        KIT_SERIAL_NUMBER,
        KIT_SERIAL_ID,
        KIT_BIN,
        COMPONENT_BIN,
        COMPONENT_QTY_ON_SHELF,
        COMPONENT_PRODUCT_ID,
        COMPONENT_PRODUCT_NUMBER,
        COMPONENT_DESCRIPTION,
        COMPONENT_QUANTITY_IN_KIT_STD,
        TOTAL_COMPONENTS_IN_KIT_STD,
        QTY_IN_KIT,
        PIECES_MISSING,
        WAREHOUSE_LOCATION,
        COMPONENT_BIN_ID
      ORDER BY
        KIT_PRODUCT_NUMBER
  )
SELECT DISTINCT
  COMPONENT_PRODUCT_NUMBER,
  COMPONENT_QTY_ON_SHELF,
  COMPONENT_BIN,
  WAREHOUSE_BIN
FROM
  sf
WHERE
  WAREHOUSE_BIN IN ({1})
ORDER BY 
  WAREHOUSE_BIN</value>
            </setting>
            <setting name="EFFICIENT_CARE_KIT_NUMBERS_QUERY" serializeAs="String">
                <value>SELECT kit_product_number FROM doarni.effcient_care_kit_numbers;</value>
            </setting>
            <setting name="LOAD_KITS_ON_START" serializeAs="String">
                <value>False</value>
            </setting>
            <setting name="EFFICIENT_CARE_KIT_SERIAL_LOOKUP" serializeAs="String">
                <value>WITH S0 AS (
    SELECT DISTINCT
      P.ID AS PRODUCT_ID,
      PC.COMPONENT_PRODUCT_ID,
      PC.QUANTITY
    FROM
      SMS_WRITE.PRODUCT P
      LEFT JOIN SMS_WRITE.PRODUCT_COMPONENT PC ON P.ID = PC.PRODUCT_ID
    WHERE
      P.PRODUCT_TYPE IN (1, 2)
),
    S1 AS (
      SELECT
        P.ID                     AS KIT_PRODUCT_ID,
        P.PRODUCT_NUMBER         AS KIT_PRODUCT_NUMBER,
        P.EDI_NUMBER             AS KIT_EDI,
        P.DESCRIPTION            AS KIT_DESCRIPTION,
        P2.PRODUCT_NUMBER        AS COMPONENT_PRODUCT_NUMBER,
        P2.ID                    AS COMPONENT_PROD_ID,
        P2.EDI_NUMBER            AS COMPONENT_EDI_NUMBER,
        P2.DESCRIPTION           AS COMPONENT_DESCRIPTION,
        S0.QUANTITY              AS COMPONENT_QUANTITY_IN_KIT,
        COUNT(P2.PRODUCT_NUMBER) AS TOTAL_COMPONENT_QTY_IN_KIT
      FROM
        S0
        LEFT JOIN SMS_WRITE.PRODUCT P ON S0.PRODUCT_ID = P.ID
        LEFT JOIN SMS_WRITE.PRODUCT P2 ON S0.COMPONENT_PRODUCT_ID = P2.ID
      GROUP BY
        P.ID, P.PRODUCT_NUMBER, P.EDI_NUMBER, P.DESCRIPTION,
        P2.ID, P2.EDI_NUMBER, P2.PRODUCT_NUMBER, P2.DESCRIPTION,
        S0.QUANTITY
  ),

    S5 AS (
      SELECT
        P2.PRODUCT_NUMBER                             AS KIT_PROD_NUMBER,
        PS.SERIAL_NUMBER                              AS SERIAL_NUMBER,
        B.ZONE || '-' || B.POSITION || '-' || B.SHELF AS KIT_BIN,
        P.EDI_NUMBER                                  AS COMPONENT_EDI,
        SUM(S.QUANTITY_AVAILABLE)                     AS QUANTITY_AVAILABLE,
        PL.LOT_NUMBER                                 AS COMPONENT_LOT_NUMBER
      FROM
        SMS_WRITE.STOCK S
        LEFT JOIN SMS_WRITE.PRODUCT P ON S.PRODUCT_ID = P.ID
        LEFT JOIN SMS_WRITE.STOCK S2 ON S.CONTAINER_ID = S2.ID AND S.CONTAINER_TYPE = 2
        LEFT JOIN SMS_WRITE.PRODUCT P2 ON S2.PRODUCT_ID = P2.ID
        LEFT JOIN SMS_WRITE.PRODUCT_SERIAL PS ON S2.SERIAL_ID = PS.ID
        LEFT JOIN SMS_WRITE.BIN B ON S2.CONTAINER_ID = B.ID AND S2.CONTAINER_TYPE = 1
        LEFT JOIN SMS_WRITE.PRODUCT_LOT PL ON S.LOT_ID = PL.ID
      WHERE
        S.LOCATION_TYPE = 1
        AND S.LOCATION_ID IN (370, 1871)
        AND S.STOCK_TYPE = 2
        AND S.CONTAINER_TYPE = 2
        AND P2.PRODUCT_NUMBER IS NOT NULL
      GROUP BY
        PL.LOT_NUMBER,
        P2.PRODUCT_NUMBER,
        PS.SERIAL_NUMBER,
        B.ZONE || '-' || B.POSITION || '-' || B.SHELF,
        P.EDI_NUMBER
  ),
    S7 AS (
      SELECT DISTINCT
        S.LOCATION_ID,
        P.PRODUCT_NUMBER                              AS KIT_PRODUCT_NUMBER,
        PS.ID                                         AS SERIAL_ID,
        PS.SERIAL_NUMBER,
        S.HOLD_REASON,
        S.HOLD_NOTE,
        B.ZONE || '-' || B.POSITION || '-' || B.SHELF AS KIT_BIN,
        S.ID                                          AS STOCK_ID,
        S.CONTAINER_ID                                AS BIN_ID
      FROM
        SMS_WRITE.STOCK S
        LEFT JOIN SMS_WRITE.PRODUCT P ON S.PRODUCT_ID = P.ID
        LEFT JOIN SMS_WRITE.PRODUCT_SERIAL PS ON PS.ID = S.SERIAL_ID
        LEFT JOIN SMS_WRITE.BIN B ON B.ID = S.CONTAINER_ID AND S.CONTAINER_TYPE = 1
      WHERE
        S.INVENTORY_TYPE = 3
        AND S.STOCK_TYPE IN (3, 4)
        AND S.LOCATION_TYPE = 1
        AND S.LOCATION_ID IN (370, 1871)
  ),
    S8 AS (
      SELECT
        P.PRODUCT_NUMBER,
        P.ID                                          AS COMPONENT_ID,
        SUM(S.QUANTITY_AVAILABLE)                     AS QUANTITY_AVAILABLE,
        B.ZONE || '-' || B.POSITION || '-' || B.SHELF AS COMPONENT_BIN,
        B.ID                                          AS COMPONENT_BIN_ID,
        CASE
        WHEN B.LOCATION_ID = 370
          THEN 'SOUTHAVEN'
        WHEN B.LOCATION_ID = 1871
          THEN 'WARSAW'
        END                                           AS WAREHOUSE_BIN
      FROM
        SMS_WRITE.STOCK S
        LEFT JOIN SMS_WRITE.PRODUCT P ON S.PRODUCT_ID = P.ID
        LEFT JOIN SMS_WRITE.BIN B ON S.CONTAINER_ID = B.ID AND S.CONTAINER_TYPE = 1
      WHERE
        S.LOCATION_ID IN (370, 1871)
        AND S.STOCK_TYPE IN (1, 2)
        AND S.QUANTITY_AVAILABLE &gt; 0
        AND B.LOCATION_ID IN (370, 1871)
      GROUP BY
        P.PRODUCT_NUMBER, P.ID, B.ZONE, B.POSITION, B.SHELF, B.LOCATION_ID, B.ID
  ),
    S9 AS (
      SELECT
        S7.LOCATION_ID,
        S1.KIT_PRODUCT_ID,
        S1.KIT_PRODUCT_NUMBER,
        S1.KIT_EDI,
        S1.KIT_DESCRIPTION,
        S7.SERIAL_NUMBER,
        S7.SERIAL_ID,
        S7.KIT_BIN,
        S7.STOCK_ID,
        S7.BIN_ID,
        S1.COMPONENT_PRODUCT_NUMBER,
        S1.COMPONENT_PROD_ID,
        S1.COMPONENT_EDI_NUMBER,
        S1.COMPONENT_DESCRIPTION,
        S1.COMPONENT_QUANTITY_IN_KIT,
        S1.TOTAL_COMPONENT_QTY_IN_KIT,
        S7.HOLD_REASON,
        S7.HOLD_NOTE
      FROM
        S1
        LEFT JOIN S7 ON S1.KIT_PRODUCT_NUMBER = S7.KIT_PRODUCT_NUMBER
  ),
    WRAPUP AS (
      SELECT
        S9.KIT_PRODUCT_ID                                                                       AS KIT_PRODUCT_ID,
        'Z-' || S9.KIT_PRODUCT_ID || '-' || S9.SERIAL_NUMBER                                    AS KIT_BARCODE,
        S9.KIT_PRODUCT_NUMBER                                                                   AS KIT_PRODUCT_NUMBER,
        S9.KIT_EDI                                                                              AS KIT_EDI_NUMBER,
        S9.KIT_DESCRIPTION                                                                      AS KIT_DESCRIPTION,
        S9.SERIAL_NUMBER                                                                        AS KIT_SERIAL_NUMBER,
        S9.SERIAL_ID                                                                            AS KIT_SERIAL_ID,
        S9.KIT_BIN,
        S9.BIN_ID                                                                               AS KIT_BIN_ID,
        CASE
        WHEN S9.LOCATION_ID = 370
          THEN 'SOUTHAVEN'
        WHEN S9.LOCATION_ID = 1871
          THEN 'WARSAW'
        END                                                                                     AS WAREHOUSE_LOCATION,
        S9.COMPONENT_PRODUCT_NUMBER                                                             AS COMPONENT_PRODUCT_NUMBER,
        S9.COMPONENT_PROD_ID                                                                    AS COMPONENT_PRODUCT_ID,
        S9.COMPONENT_DESCRIPTION                                                                AS COMPONENT_DESCRIPTION,
        COALESCE(S8.QUANTITY_AVAILABLE,
                 0)                                                                             AS COMPONENT_QTY_ON_SHELF,
        COALESCE(S8.COMPONENT_BIN, NULL)                                                        AS COMPONENT_BIN,
        COALESCE(S8.WAREHOUSE_BIN, 'NONE AVAILABLE')                                            AS WAREHOUSE_BIN,
        S8.COMPONENT_BIN_ID,
        S9.COMPONENT_QUANTITY_IN_KIT                                                            AS COMPONENT_QUANTITY_IN_KIT_STD,
        COUNT(*)
        OVER (
          PARTITION BY S9.TOTAL_COMPONENT_QTY_IN_KIT, S9.SERIAL_NUMBER, S9.KIT_PRODUCT_NUMBER ) AS TOTAL_COMPONENTS_IN_KIT_STD,
        COALESCE(S5.QUANTITY_AVAILABLE, 0)                                                      AS QTY_IN_KIT,
        SUM(S9.COMPONENT_QUANTITY_IN_KIT - COALESCE(S5.QUANTITY_AVAILABLE, 0))
        OVER (
          PARTITION BY S9.KIT_PRODUCT_NUMBER, S9.SERIAL_NUMBER )                                AS PIECES_MISSING,
        S9.HOLD_REASON,
        S9.HOLD_NOTE,
        S9.STOCK_ID                                                                             AS KIT_STOCK_ID,
        S9.BIN_ID                                                                               AS KIT_CONTAINER_ID
      FROM
        S9
        LEFT JOIN S5 ON S9.KIT_PRODUCT_NUMBER = S5.KIT_PROD_NUMBER AND S9.SERIAL_NUMBER = S5.SERIAL_NUMBER AND
                        S9.COMPONENT_EDI_NUMBER = S5.COMPONENT_EDI
        LEFT JOIN S8 ON S8.COMPONENT_ID = S9.COMPONENT_PROD_ID
      WHERE
        S9.KIT_PRODUCT_NUMBER LIKE '%{0}%'
      GROUP BY
        S9.BIN_ID,
        S8.COMPONENT_BIN_ID,
        S8.WAREHOUSE_BIN,
        S9.LOCATION_ID,
        S9.HOLD_REASON,
        S9.HOLD_NOTE,
        S9.KIT_PRODUCT_ID,
        S9.SERIAL_NUMBER,
        S9.SERIAL_ID,
        S9.KIT_PRODUCT_NUMBER,
        S9.KIT_DESCRIPTION,
        S9.KIT_EDI,
        S9.KIT_BIN,
        S9.COMPONENT_EDI_NUMBER,
        S8.QUANTITY_AVAILABLE,
        S8.COMPONENT_BIN,
        S9.COMPONENT_QUANTITY_IN_KIT,
        S9.TOTAL_COMPONENT_QTY_IN_KIT,
        S9.COMPONENT_DESCRIPTION,
        S9.COMPONENT_PROD_ID,
        S9.COMPONENT_PRODUCT_NUMBER,
        S5.QUANTITY_AVAILABLE,
        S9.STOCK_ID
      ORDER BY
        S9.SERIAL_NUMBER,
        S9.COMPONENT_PRODUCT_NUMBER
  ),
    sf AS (
      SELECT
        KIT_PRODUCT_ID,
        KIT_PRODUCT_NUMBER,
        KIT_DESCRIPTION,
        KIT_SERIAL_NUMBER,
        KIT_SERIAL_ID,
        KIT_BIN,
        KIT_BIN_ID,
        WAREHOUSE_LOCATION,
        KIT_STOCK_ID,
        KIT_CONTAINER_ID,
        COMPONENT_PRODUCT_ID,
        COMPONENT_PRODUCT_NUMBER,
        COMPONENT_DESCRIPTION,
        COMPONENT_QTY_ON_SHELF,
        COMPONENT_BIN,
        WAREHOUSE_BIN,
        COMPONENT_BIN_ID,
        COMPONENT_QUANTITY_IN_KIT_STD,
        TOTAL_COMPONENTS_IN_KIT_STD,
        TOTAL_COMPONENTS_IN_KIT_STD - PIECES_MISSING AS TOTAL_PIECES_IN_KIT,
        QTY_IN_KIT                                   AS COMPONENT_QTY_IN_KIT,
        PIECES_MISSING,
        CASE
        WHEN PIECES_MISSING = 0
          THEN 'VALID'
        WHEN PIECES_MISSING != 0
          THEN 'INVALID'
        WHEN KIT_SERIAL_NUMBER IS NULL
          THEN 'NOT_BUILT'
        END                                          AS KIT_HEALTH,
        HOLD_NOTE,
        HOLD_REASON,
        CASE
        WHEN HOLD_REASON = 1
          THEN 'CORPORATE_HOLD'
        WHEN HOLD_REASON = 2
          THEN 'AWAITING_QC_CHECK'
        WHEN HOLD_REASON = 3
          THEN 'INVENTORY_STAGING'
        WHEN HOLD_REASON = 4
          THEN 'MISSING_ITEMS'
        WHEN HOLD_REASON = 5
          THEN 'PICK_SHORTAGE'
        WHEN HOLD_REASON = 6
          THEN 'CYCLE_COUNT_IN_PROGRESS'
        WHEN HOLD_REASON = 7
          THEN 'NOT_FOUND_DURING_CYCLE_COUNT'
        END                                          AS HOLD_REASON_DESCRIPTION
      FROM
        WRAPUP
      GROUP BY
        KIT_BIN_ID,
        WAREHOUSE_BIN,
        KIT_CONTAINER_ID,
        KIT_STOCK_ID,
        HOLD_NOTE,
        HOLD_REASON,
        KIT_PRODUCT_ID,
        KIT_PRODUCT_NUMBER,
        KIT_DESCRIPTION,
        KIT_SERIAL_NUMBER,
        KIT_SERIAL_ID,
        KIT_BIN,
        COMPONENT_BIN,
        COMPONENT_QTY_ON_SHELF,
        COMPONENT_PRODUCT_ID,
        COMPONENT_PRODUCT_NUMBER,
        COMPONENT_DESCRIPTION,
        COMPONENT_QUANTITY_IN_KIT_STD,
        TOTAL_COMPONENTS_IN_KIT_STD,
        QTY_IN_KIT,
        PIECES_MISSING,
        WAREHOUSE_LOCATION,
        COMPONENT_BIN_ID
      ORDER BY
        KIT_PRODUCT_NUMBER
  )
    ,serials AS (
      SELECT DISTINCT
        KIT_PRODUCT_NUMBER,
        KIT_SERIAL_NUMBER,
        KIT_HEALTH
      FROM
        sf
      ORDER BY
        KIT_SERIAL_NUMBER
  )
    ,sff AS (
      SELECT DISTINCT
        KIT_PRODUCT_NUMBER,
        KIT_HEALTH,
        COUNT(KIT_SERIAL_NUMBER)
        OVER (
          PARTITION BY KIT_HEALTH) AS COUNT_OF_VALIDITY
      FROM
        serials
      GROUP BY
        KIT_PRODUCT_NUMBER,
        KIT_HEALTH,
        KIT_SERIAL_NUMBER
      ORDER BY
        KIT_PRODUCT_NUMBER
  )
SELECT
  KIT_PRODUCT_NUMBER,
  MAX(CASE WHEN KIT_HEALTH = 'VALID'
  THEN COUNT_OF_VALIDITY
           ELSE 0 END) AS VALID,
  MAX(CASE WHEN KIT_HEALTH = 'INVALID'
  THEN COUNT_OF_VALIDITY
           ELSE 0 END) AS INVALID
FROM
  sff
GROUP BY
  KIT_PRODUCT_NUMBER</value>
            </setting>
            <setting name="DEFAULT_WAREHOUSE_INDEX" serializeAs="String">
                <value>1</value>
            </setting>
            <setting name="EFFICIENT_CARE_KIT_VERIFY" serializeAs="String">
                <value>SELECT kit_product_number FROM doarni.effcient_care_kit_numbers WHERE kit_product_number = '{0}'</value>
            </setting>
            <setting name="EFFICIENT_CARE_BUNDLE_BREAKOUT" serializeAs="String">
                <value>select distinct
  kit_product_number
from
  doarni.effcient_care_bundle_numbers
where
  bundle_product_number = '{0}'</value>
            </setting>
            <setting name="EFFICIENT_CARE_BUNDLE_NUMBER_VERIFY" serializeAs="String">
                <value>select distinct
  bundle_product_number
from
  doarni.effcient_care_bundle_numbers
where
  bundle_product_number like '%{0}%'
</value>
            </setting>
            <setting name="EFFICIENT_CARE_KIT_COMPONENT_STD" serializeAs="String">
                <value>WITH S0 AS (
    SELECT DISTINCT
      P.ID AS PRODUCT_ID,
      PC.COMPONENT_PRODUCT_ID,
      PC.QUANTITY
    FROM
      SMS_WRITE.PRODUCT P
      LEFT JOIN SMS_WRITE.PRODUCT_COMPONENT PC ON P.ID = PC.PRODUCT_ID
    WHERE
      P.PRODUCT_TYPE IN (1, 2)
)
SELECT
  P2.PRODUCT_NUMBER        AS COMPONENT_PRODUCT_NUMBER
FROM
  S0
  LEFT JOIN SMS_WRITE.PRODUCT P ON S0.PRODUCT_ID = P.ID
  LEFT JOIN SMS_WRITE.PRODUCT P2 ON S0.COMPONENT_PRODUCT_ID = P2.ID
WHERE
  p.PRODUCT_NUMBER like '%{0}%'
GROUP BY
  P2.ID, P2.EDI_NUMBER, P2.PRODUCT_NUMBER, P2.DESCRIPTION

</value>
            </setting>
            <setting name="EFFICIENT_CARE_COMPONENT_IN_KIT_SEARCH" serializeAs="String">
                <value>WITH S0 AS (
    SELECT DISTINCT
      P.ID AS PRODUCT_ID,
      PC.COMPONENT_PRODUCT_ID,
      PC.QUANTITY
    FROM
      SMS_WRITE.PRODUCT P
      LEFT JOIN SMS_WRITE.PRODUCT_COMPONENT PC ON P.ID = PC.PRODUCT_ID
    WHERE
      P.PRODUCT_TYPE IN (1, 2)
),
    S1 AS (
      SELECT
        P.ID                     AS KIT_PRODUCT_ID,
        P.PRODUCT_NUMBER         AS KIT_PRODUCT_NUMBER,
        P.EDI_NUMBER             AS KIT_EDI,
        P.DESCRIPTION            AS KIT_DESCRIPTION,
        P2.PRODUCT_NUMBER        AS COMPONENT_PRODUCT_NUMBER,
        P2.ID                    AS COMPONENT_PROD_ID,
        P2.EDI_NUMBER            AS COMPONENT_EDI_NUMBER,
        P2.DESCRIPTION           AS COMPONENT_DESCRIPTION,
        S0.QUANTITY              AS COMPONENT_QUANTITY_IN_KIT,
        COUNT(P2.PRODUCT_NUMBER) AS TOTAL_COMPONENT_QTY_IN_KIT
      FROM
        S0
        LEFT JOIN SMS_WRITE.PRODUCT P ON S0.PRODUCT_ID = P.ID
        LEFT JOIN SMS_WRITE.PRODUCT P2 ON S0.COMPONENT_PRODUCT_ID = P2.ID
      GROUP BY
        P.ID, P.PRODUCT_NUMBER, P.EDI_NUMBER, P.DESCRIPTION,
        P2.ID, P2.EDI_NUMBER, P2.PRODUCT_NUMBER, P2.DESCRIPTION,
        S0.QUANTITY
  ),

    S5 AS (
      SELECT
        P2.PRODUCT_NUMBER                             AS KIT_PROD_NUMBER,
        PS.SERIAL_NUMBER                              AS SERIAL_NUMBER,
        B.ZONE || '-' || B.POSITION || '-' || B.SHELF AS KIT_BIN,
        P.EDI_NUMBER                                  AS COMPONENT_EDI,
        SUM(S.QUANTITY_AVAILABLE)                     AS QUANTITY_AVAILABLE,
        PL.LOT_NUMBER                                 AS COMPONENT_LOT_NUMBER
      FROM
        SMS_WRITE.STOCK S
        LEFT JOIN SMS_WRITE.PRODUCT P ON S.PRODUCT_ID = P.ID
        LEFT JOIN SMS_WRITE.STOCK S2 ON S.CONTAINER_ID = S2.ID AND S.CONTAINER_TYPE = 2
        LEFT JOIN SMS_WRITE.PRODUCT P2 ON S2.PRODUCT_ID = P2.ID
        LEFT JOIN SMS_WRITE.PRODUCT_SERIAL PS ON S2.SERIAL_ID = PS.ID
        LEFT JOIN SMS_WRITE.BIN B ON S2.CONTAINER_ID = B.ID AND S2.CONTAINER_TYPE = 1
        LEFT JOIN SMS_WRITE.PRODUCT_LOT PL ON S.LOT_ID = PL.ID
      WHERE
        S.LOCATION_TYPE = 1
        AND S.LOCATION_ID IN (370, 1871)
        AND S.STOCK_TYPE = 2
        AND S.CONTAINER_TYPE = 2
        AND P2.PRODUCT_NUMBER IS NOT NULL
      GROUP BY
        PL.LOT_NUMBER,
        P2.PRODUCT_NUMBER,
        PS.SERIAL_NUMBER,
        B.ZONE || '-' || B.POSITION || '-' || B.SHELF,
        P.EDI_NUMBER
  ),
    S7 AS (
      SELECT DISTINCT
        S.LOCATION_ID,
        P.PRODUCT_NUMBER                              AS KIT_PRODUCT_NUMBER,
        PS.ID                                         AS SERIAL_ID,
        PS.SERIAL_NUMBER,
        S.HOLD_REASON,
        S.HOLD_NOTE,
        B.ZONE || '-' || B.POSITION || '-' || B.SHELF AS KIT_BIN,
        S.ID                                          AS STOCK_ID,
        S.CONTAINER_ID                                AS BIN_ID
      FROM
        SMS_WRITE.STOCK S
        LEFT JOIN SMS_WRITE.PRODUCT P ON S.PRODUCT_ID = P.ID
        LEFT JOIN SMS_WRITE.PRODUCT_SERIAL PS ON PS.ID = S.SERIAL_ID
        LEFT JOIN SMS_WRITE.BIN B ON B.ID = S.CONTAINER_ID AND S.CONTAINER_TYPE = 1
      WHERE
        S.INVENTORY_TYPE = 3
        AND S.STOCK_TYPE IN (3, 4)
        AND S.LOCATION_TYPE = 1
        AND S.LOCATION_ID IN (370, 1871)
  ),
    S8 AS (
      SELECT
        P.PRODUCT_NUMBER,
        P.ID                                          AS COMPONENT_ID,
        SUM(S.QUANTITY_AVAILABLE)                     AS QUANTITY_AVAILABLE,
        B.ZONE || '-' || B.POSITION || '-' || B.SHELF AS COMPONENT_BIN,
        B.ID                                          AS COMPONENT_BIN_ID,
        CASE
        WHEN B.LOCATION_ID = 370
          THEN 'SOUTHAVEN'
        WHEN B.LOCATION_ID = 1871
          THEN 'WARSAW'
        END                                           AS WAREHOUSE_BIN
      FROM
        SMS_WRITE.STOCK S
        LEFT JOIN SMS_WRITE.PRODUCT P ON S.PRODUCT_ID = P.ID
        LEFT JOIN SMS_WRITE.BIN B ON S.CONTAINER_ID = B.ID AND S.CONTAINER_TYPE = 1
      WHERE
        S.LOCATION_ID IN (370, 1871)
        AND S.STOCK_TYPE IN (1, 2)
        AND S.QUANTITY_AVAILABLE &gt; 0
        AND B.LOCATION_ID IN (370, 1871)
      GROUP BY
        P.PRODUCT_NUMBER, P.ID, B.ZONE, B.POSITION, B.SHELF, B.LOCATION_ID, B.ID
  ),
    S9 AS (
      SELECT
        S7.LOCATION_ID,
        S1.KIT_PRODUCT_ID,
        S1.KIT_PRODUCT_NUMBER,
        S1.KIT_EDI,
        S1.KIT_DESCRIPTION,
        S7.SERIAL_NUMBER,
        S7.SERIAL_ID,
        S7.KIT_BIN,
        S7.STOCK_ID,
        S7.BIN_ID,
        S1.COMPONENT_PRODUCT_NUMBER,
        S1.COMPONENT_PROD_ID,
        S1.COMPONENT_EDI_NUMBER,
        S1.COMPONENT_DESCRIPTION,
        S1.COMPONENT_QUANTITY_IN_KIT,
        S1.TOTAL_COMPONENT_QTY_IN_KIT,
        S7.HOLD_REASON,
        S7.HOLD_NOTE
      FROM
        S1
        LEFT JOIN S7 ON S1.KIT_PRODUCT_NUMBER = S7.KIT_PRODUCT_NUMBER
  ),
    WRAPUP AS (
      SELECT
        S9.KIT_PRODUCT_ID                                                                       AS KIT_PRODUCT_ID,
        'Z-' || S9.KIT_PRODUCT_ID || '-' || S9.SERIAL_NUMBER                                    AS KIT_BARCODE,
        S9.KIT_PRODUCT_NUMBER                                                                   AS KIT_PRODUCT_NUMBER,
        S9.KIT_EDI                                                                              AS KIT_EDI_NUMBER,
        S9.KIT_DESCRIPTION                                                                      AS KIT_DESCRIPTION,
        S9.SERIAL_NUMBER                                                                        AS KIT_SERIAL_NUMBER,
        S9.SERIAL_ID                                                                            AS KIT_SERIAL_ID,
        S9.KIT_BIN,
        S9.BIN_ID                                                                               AS KIT_BIN_ID,
        CASE
        WHEN S9.LOCATION_ID = 370
          THEN 'SOUTHAVEN'
        WHEN S9.LOCATION_ID = 1871
          THEN 'WARSAW'
        END                                                                                     AS WAREHOUSE_LOCATION,
        S9.COMPONENT_PRODUCT_NUMBER                                                             AS COMPONENT_PRODUCT_NUMBER,
        S9.COMPONENT_PROD_ID                                                                    AS COMPONENT_PRODUCT_ID,
        S9.COMPONENT_DESCRIPTION                                                                AS COMPONENT_DESCRIPTION,
        COALESCE(S8.QUANTITY_AVAILABLE,
                 0)                                                                             AS COMPONENT_QTY_ON_SHELF,
        COALESCE(S8.COMPONENT_BIN, NULL)                                                        AS COMPONENT_BIN,
        COALESCE(S8.WAREHOUSE_BIN, 'NONE AVAILABLE')                                            AS WAREHOUSE_BIN,
        S8.COMPONENT_BIN_ID,
        S9.COMPONENT_QUANTITY_IN_KIT                                                            AS COMPONENT_QUANTITY_IN_KIT_STD,
        COUNT(*)
        OVER (
          PARTITION BY S9.TOTAL_COMPONENT_QTY_IN_KIT, S9.SERIAL_NUMBER, S9.KIT_PRODUCT_NUMBER ) AS TOTAL_COMPONENTS_IN_KIT_STD,
        COALESCE(S5.QUANTITY_AVAILABLE, 0)                                                      AS QTY_IN_KIT,
        SUM(S9.COMPONENT_QUANTITY_IN_KIT - COALESCE(S5.QUANTITY_AVAILABLE, 0))
        OVER (
          PARTITION BY S9.KIT_PRODUCT_NUMBER, S9.SERIAL_NUMBER )                                AS PIECES_MISSING,
        S9.HOLD_REASON,
        S9.HOLD_NOTE,
        S9.STOCK_ID                                                                             AS KIT_STOCK_ID,
        S9.BIN_ID                                                                               AS KIT_CONTAINER_ID
      FROM
        S9
        LEFT JOIN S5 ON S9.KIT_PRODUCT_NUMBER = S5.KIT_PROD_NUMBER AND S9.SERIAL_NUMBER = S5.SERIAL_NUMBER AND
                        S9.COMPONENT_EDI_NUMBER = S5.COMPONENT_EDI
        LEFT JOIN S8 ON S8.COMPONENT_ID = S9.COMPONENT_PROD_ID
      WHERE
        S9.COMPONENT_PRODUCT_NUMBER IN (
          {0}
        )
      GROUP BY
        S9.BIN_ID,
        S8.COMPONENT_BIN_ID,
        S8.WAREHOUSE_BIN,
        S9.LOCATION_ID,
        S9.HOLD_REASON,
        S9.HOLD_NOTE,
        S9.KIT_PRODUCT_ID,
        S9.SERIAL_NUMBER,
        S9.SERIAL_ID,
        S9.KIT_PRODUCT_NUMBER,
        S9.KIT_DESCRIPTION,
        S9.KIT_EDI,
        S9.KIT_BIN,
        S9.COMPONENT_EDI_NUMBER,
        S8.QUANTITY_AVAILABLE,
        S8.COMPONENT_BIN,
        S9.COMPONENT_QUANTITY_IN_KIT,
        S9.TOTAL_COMPONENT_QTY_IN_KIT,
        S9.COMPONENT_DESCRIPTION,
        S9.COMPONENT_PROD_ID,
        S9.COMPONENT_PRODUCT_NUMBER,
        S5.QUANTITY_AVAILABLE,
        S9.STOCK_ID
      ORDER BY
        S9.SERIAL_NUMBER,
        S9.COMPONENT_PRODUCT_NUMBER
  ),
    sf AS (
      SELECT
        KIT_PRODUCT_ID,
        KIT_PRODUCT_NUMBER,
        KIT_DESCRIPTION,
        KIT_SERIAL_NUMBER,
        KIT_SERIAL_ID,
        KIT_BIN,
        KIT_BIN_ID,
        WAREHOUSE_LOCATION,
        KIT_STOCK_ID,
        KIT_CONTAINER_ID,
        COMPONENT_PRODUCT_ID,
        COMPONENT_PRODUCT_NUMBER,
        COMPONENT_DESCRIPTION,
        COMPONENT_QTY_ON_SHELF,
        COMPONENT_BIN,
        WAREHOUSE_BIN,
        COMPONENT_BIN_ID,
        COMPONENT_QUANTITY_IN_KIT_STD,
        TOTAL_COMPONENTS_IN_KIT_STD,
        TOTAL_COMPONENTS_IN_KIT_STD - PIECES_MISSING AS TOTAL_PIECES_IN_KIT,
        QTY_IN_KIT                                   AS COMPONENT_QTY_IN_KIT,
        PIECES_MISSING,
        CASE
        WHEN PIECES_MISSING = 0
          THEN 'VALID'
        WHEN PIECES_MISSING != 0
          THEN 'INVALID'
        WHEN KIT_SERIAL_NUMBER IS NULL
          THEN 'NOT_BUILT'
        END                                          AS KIT_HEALTH,
        HOLD_NOTE,
        HOLD_REASON,
        CASE
        WHEN HOLD_REASON = 1
          THEN 'CORPORATE_HOLD'
        WHEN HOLD_REASON = 2
          THEN 'AWAITING_QC_CHECK'
        WHEN HOLD_REASON = 3
          THEN 'INVENTORY_STAGING'
        WHEN HOLD_REASON = 4
          THEN 'MISSING_ITEMS'
        WHEN HOLD_REASON = 5
          THEN 'PICK_SHORTAGE'
        WHEN HOLD_REASON = 6
          THEN 'CYCLE_COUNT_IN_PROGRESS'
        WHEN HOLD_REASON = 7
          THEN 'NOT_FOUND_DURING_CYCLE_COUNT'
        END                                          AS HOLD_REASON_DESCRIPTION
      FROM
        WRAPUP
      GROUP BY
        KIT_BIN_ID,
        WAREHOUSE_BIN,
        KIT_CONTAINER_ID,
        KIT_STOCK_ID,
        HOLD_NOTE,
        HOLD_REASON,
        KIT_PRODUCT_ID,
        KIT_PRODUCT_NUMBER,
        KIT_DESCRIPTION,
        KIT_SERIAL_NUMBER,
        KIT_SERIAL_ID,
        KIT_BIN,
        COMPONENT_BIN,
        COMPONENT_QTY_ON_SHELF,
        COMPONENT_PRODUCT_ID,
        COMPONENT_PRODUCT_NUMBER,
        COMPONENT_DESCRIPTION,
        COMPONENT_QUANTITY_IN_KIT_STD,
        TOTAL_COMPONENTS_IN_KIT_STD,
        QTY_IN_KIT,
        PIECES_MISSING,
        WAREHOUSE_LOCATION,
        COMPONENT_BIN_ID
      ORDER BY
        KIT_PRODUCT_NUMBER
  )
SELECT DISTINCT
  COMPONENT_PRODUCT_NUMBER,
  COMPONENT_QTY_IN_KIT,
  KIT_PRODUCT_NUMBER,
  KIT_SERIAL_NUMBER,
  KIT_BIN,
  WAREHOUSE_LOCATION
FROM
  sf
WHERE
  KIT_SERIAL_NUMBER IS NOT NULL
  AND COMPONENT_QTY_IN_KIT &gt; 0
  AND KIT_BIN != '--'
  AND WAREHOUSE_LOCATION IN ({1})
</value>
            </setting>
            <setting name="DEFAULT_CONTAINER_TYPE_INDEX" serializeAs="String">
                <value>0</value>
            </setting>
        </EfficientCareLookUp.Properties.Settings>
    </applicationSettings>
</configuration>